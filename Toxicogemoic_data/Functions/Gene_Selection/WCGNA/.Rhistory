players <- list()
players$which <- which
players$mat <- mat[which, ]
players$coef <- coef(a4, "alphas")[which, ]
players$dat <- dat[which, ]
players
}
which <- apply(coef(a4, "alphas"), 2, which.max)
atypes <- players(which)
atypes
coef(a4, "alphas")
a4 <- bestModel(as[[4]])
a4
?bestModel
players <- function(which) {
players <- list()
players$which <- which
players$mat <- mat[which, ]
players$coef <- coef(a4, "alphas")[which, ]
players$dat <- dat[which, ]
players$arch=a4$archetypes
players
}
which <- apply(coef(a4, "alphas"), 2, which.max)
atypes <- players(which)
a4$archetypes
players <- function(which) {
players <- list()
players$which <- which
players$mat <- mat[which, ]
players$coef <- coef(a4, "alphas")[which, ]
players$dat <- dat[which, ]
players$arch=a4$archetypes[which, ]
players
}
which <- apply(coef(a4, "alphas"), 2, which.max)
atypes <- players(which)
players <- function(which) {
players <- list()
players$which <- which
players$mat <- mat[which, ]
players$coef <- coef(a4, "alphas")[which, ]
players$dat <- dat[which, ]
players$arch=a4$archetypes
players
}
which <- apply(coef(a4, "alphas"), 2, which.max)
atypes <- players(which)
good_players <- function(atype, threshold) {
which <- which(coef(a4, "alphas")[, atype] > threshold)
good_coef <- coef(a4, "alphas")[which, ]
good_dat <- subset(dat[which, ], select = c(Name, Team, Position))
good_dat <- cbind(good_dat, good_coef)
good_dat <- good_dat[order(-good_coef[, atype]), ]
good_dat
}
good_threshold <- 0.95
players <- lapply(2:4, good_players, good_threshold)
players
players <- lapply(2:4, good_players, good_threshold)
players
a4$archetypes
View(mat)
library(fclust)
FKM.med()
FKM.med
?FKM.med
true_label <- as.numeric(iris$Species)
true_label
iris[,-5]
my_kmeans <- kmeans(x = iris[,-5], centers = 3)
# clustering results
my_kmeans$cluster
a4$archetypes
rand.index(a4$archetypes,mat)
rand.index(a4$archetypes,atypes$mat)
data(skel)
skel2 <- subset(skel, select=-Gender)
samp <- sample.split(skel2, SplitRatio = 0.9)
train  <- subset(skel2, samp== TRUE)
train_90=list()
for (i in 1:10){
train_90[[i]]=archetypes(train,k=i,maxIterations = 100,family = archetypesFamily('robust',zalphasfn = archetypes:::ginv.zalphasfn))
}
data(skel)
skel2 <- subset(skel, select=-Gender)
samp <- sample.split(skel2, SplitRatio = 0.9)
train  <- subset(skel2, samp== TRUE)
train_90=list()
for (i in 1:10){
train_90[[i]]=archetypes(train,k=i,maxIterations = 100,family = archetypesFamily('robust',zalphasfn = archetypes:::ginv.zalphasfn))
}
data(skel)
skel2 <- subset(skel, select=-Gender)
library(archetypes)
data(skel)
skel2 <- subset(skel, select=-Gender)
samp <- sample.split(skel2, SplitRatio = 0.9)
library(caTools)
#Use 70% of dataset as training set and remaining 30% as testing set
samp <- sample.split(skel2, SplitRatio = 0.9)
train  <- subset(skel2, samp== TRUE)
train_90=list()
for (i in 1:10){
train_90[[i]]=archetypes(train,k=i,maxIterations = 100,family = archetypesFamily('robust',zalphasfn = archetypes:::ginv.zalphasfn))
}
train_90=list()
for (i in 1:10){
train_90[[i]]=robustArchetypes(train,k=i,maxIterations = 100)
}
get_index=function(x,k,value){
ind=which(x >= value[k] & x < value[k+1])
return(ind)
}
library(pdfCluster)
library(fossil)
#####for k=1:10
threshold=seq(0,1,0.05)
coef_ass=list()
coef_train=list()
data_ass=list()
data_train=list()
rand=list()
library(pdfCluster)
for(j in 1:10){
###getting index
coef_ass[[j]]=unique(sort(unlist(apply(train_90[[j]]$alphas,2,get_index,1,threshold))))
data_train[[j]]=train[coef_train[[j]],]
rand[[j]]=adj.rand.index(train_90[[j]]$archetypes,data_train[[j]])
}
threshold=seq(0,1,0.05)
coef_train=list()
data_train=list()
rand=list()
library(pdfCluster)
for(j in 1:10){
###getting index
coef_train[[j]]=unique(sort(unlist(apply(train_90[[j]]$alphas,2,get_index,1,threshold))))
data_train[[j]]=train[coef_train[[j]],]
rand[[j]]=adj.rand.index(train_90[[j]]$archetypes,data_train[[j]])
}
View(rand)
View(data_train)
View(coef_train)
coef_train[[2]]
train_90[[2]]$alphas
train_90[[3]]$alphas
View(data_train)
adj.rand.index(train_90[[2]]$archetypes,data_train[[2]])
rand.index(train_90[[2]]$archetypes,data_train[[2]])
l=as.matrix(train_90[[2]]$archetypes)
p=as.matrix(data_train[[2]])
rand.index(p,l)
data_train[[2]]
View(data_train)
View(coef_train)
data(skel)
skel2 <- subset(skel, select=-Gender)
samp <- sample.split(skel2, SplitRatio = 0.9)
train  <- subset(skel2, samp== TRUE)
train_90=list()
for (i in 1:10){
train_90[[i]]=robustArchetypes(train,k=i,maxIterations = 100)
}
View(train)
View(train_90)
get_index=function(x,k,value){
ind=which(x >= value[k] & x < value[k+1])
return(ind)
}
for(j in 1:10){
###getting index
coef_train[[j]]=unique(sort(unlist(apply(train_90[[j]]$alphas,2,get_index,1,threshold))))
data_train[[j]]=train[coef_train[[j]],]
rand[[j]]=adj.rand.index(train_90[[j]]$archetypes,data_train[[j]])
}
threshold=seq(0,1,0.05)
coef_train=list()
data_train=list()
rand=list()
library(pdfCluster)
for(j in 1:10){
###getting index
coef_train[[j]]=unique(sort(unlist(apply(train_90[[j]]$alphas,2,get_index,1,threshold))))
data_train[[j]]=train[coef_train[[j]],]
rand[[j]]=adj.rand.index(train_90[[j]]$archetypes,data_train[[j]])
}
View(coef_train)
View(data_train)
View(coef_train)
View(data_train)
View(data_train)
View(rand)
data("NBAPlayerStatistics0910")
dat <- subset(NBAPlayerStatistics0910,
select = -c(Ejections, FlagrantFouls))
install.packages('SportsAnalytics_0.1.tar', repos=NULL, type='source')
library("SportsAnalytics")
library("archetypes")
library("RColorBrewer")
col_pal <- brewer.pal(7, "Set1")
col_black <- rgb(0, 0, 0, 0.2)
### Data: ############################################################
data("NBAPlayerStatistics0910")
dat <- subset(NBAPlayerStatistics0910,
select = -c(Ejections, FlagrantFouls))
mat <- as.matrix(subset(dat, select = -c(League, Name, Team, Position)))
pcplot(mat, col = col_black, las = 2)
set.seed(4321)
as <- stepArchetypes(mat, k = 1:10)
rss(as)
screeplot(as)
a4 <- bestModel(as[[4]])
parameters(a4)
barplot(a4, mat, percentiles = TRUE)
### Player interpretation: ###########################################
players <- function(which) {
players <- list()
players$which <- which
players$mat <- mat[which, ]
players$coef <- coef(a4, "alphas")[which, ]
players$dat <- dat[which, ]
players$arch=a4$archetypes
players
}
### Archetypal players:
which <- apply(coef(a4, "alphas"), 2, which.max)
atypes <- players(which)
adj.rand.index(atypes$arch,mat)
rand.index(atypes$arch,mat)
rand.index(atypes$arch,atypes$mat)
adj.rand.index(atypes$arch,atypes$mat)
install.packages('clues_0.2.9.tar', repos=NULL, type='source')
data(skel)
skel2 <- subset(skel, select=-Gender)
samp <- sample.split(skel2, SplitRatio = 0.9)
train  <- subset(skel2, samp== TRUE)
train_90=list()
for (i in 1:10){
train_90[[i]]=robustArchetypes(train,k=i,maxIterations = 100)
}
View(train)
get_index=function(x,k,value){
ind=which(x >= value[k] & x < value[k+1])
return(ind)
}
threshold=seq(0,1,0.05)
coef_train=list()
data_train=list()
rand=list()
library(pdfCluster)
for(j in 1:10){
###getting index
coef_train[[j]]=unique(sort(unlist(apply(train_90[[j]]$alphas,2,get_index,1,threshold))))
data_train[[j]]=train[coef_train[[j]],]
rand[[j]]=adj.rand.index(train_90[[j]]$archetypes,data_train[[j]])
}
View(rand)
View(coef_train)
View(data_train)
train_90[[2]]$archetypes
train_90[[3]]$archetypes
View(train)
View(data_train)
data_train[[2]]
train_90[[10]]$archetypes
install.packages('clues_0.3.1.tar', repos=NULL, type='source')
library('clues')
library(cluster)
cell_com_tubingen=fread('cellcomposition.tsv')
cell_com_tubingen=fread('cellcomposition.tsv')
cell_com_tubingen=fread('cellcomposition.tsv')
cell_com_tubingen=fread('cellcomposition.tsv')
cell_com_tubingen=fread('cellcomposition.tsv')
# libraries ----------------------------------------------------------------
library(data.table)
library(openxlsx)
library(dplyr)
library(tidyr)
library(tidylog)
library(janitor) #clean_names(df) or %>% clean_names()
library(ragg) #use agg_png to have quicker plots
library(report) #for session report
library(ggplot2)
require(svMisc)
library(tibble)
library(ggpubr)
# options -----------------------------------------------------------------
cell_com_tubingen=fread('cellcomposition.tsv')
# libraries ----------------------------------------------------------------
library(data.table)
library(openxlsx)
library(dplyr)
library(tidyr)
library(tidylog)
library(janitor) #clean_names(df) or %>% clean_names()
library(ragg) #use agg_png to have quicker plots
library(report) #for session report
library(ggplot2)
require(svMisc)
library(tibble)
library(ggpubr)
# options -----------------------------------------------------------------
cell_com_tubingen=fread('cellcomposition.tsv')
# libraries ----------------------------------------------------------------
library(data.table)
library(openxlsx)
library(dplyr)
library(tidyr)
library(tidylog)
library(janitor) #clean_names(df) or %>% clean_names()
library(ragg) #use agg_png to have quicker plots
library(report) #for session report
library(ggplot2)
require(svMisc)
library(tibble)
library(ggpubr)
# options -----------------------------------------------------------------
cell_com_tubingen=fread('cellcomposition.tsv')
phenodata <- fread("pheno-2.csv",skip=1)
install.packages("Rtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
library(devtools)
install_github("macroecology/letsR")
library(letsR)
library(letsR)
install.packages("Rcpp")
? install_github
?install_github
??install_github
install_github("macroecology/letsR")
library(devtools)
library(devtools)
install_github("macroecology/letsR")
library(letsR)
library(letsR)
####get hub genes
gene_expr=read.csv('gene_expression.csv')
setwd("~/Desktop/Master/Toxicogemic_Data")
setwd("~/Desktop/Master/Toxicogemic_Data/GENE_selection/WCGNA")
####get hub genes
gene_expr=read.csv('gene_expression.csv')
rownames(gene_expr) <- gene_expr$X
gene_expr <- gene_expr[, -1]
module_eigengenes=read.csv('Soft_Power_Threshold/modules_18.csv')
rownames(module_eigengenes) <- module_eigengenes$X
module_eigengenes<- module_eigengenes[, -1]
###colors
moduleColors = read.csv('modules_18.csv')
###
nSamples <- nrow(gene_expr)
####correlation
module.genes.corr <- cor(gene_expr, module_eigengenes, use = "p")
######p-value
module.membership.measure.pvals <- corPvalueStudent(module.genes.corr , nSamples)
####get hub genes
library(WGCNA)
library(data.table)
library(gridExtra)
library(ggplot2)
library(dplyr)
library(tibble)
library(devtools)
library(CorLevelPlot)
gene_expr=read.csv('gene_expression.csv')
rownames(gene_expr) <- gene_expr$X
gene_expr <- gene_expr[, -1]
module_eigengenes=read.csv('Soft_Power_Threshold/modules_18.csv')
rownames(module_eigengenes) <- module_eigengenes$X
module_eigengenes<- module_eigengenes[, -1]
###colors
moduleColors = read.csv('modules_18.csv')
###
nSamples <- nrow(gene_expr)
####correlation
module.genes.corr <- cor(gene_expr, module_eigengenes, use = "p")
######p-value
module.membership.measure.pvals <- corPvalueStudent(module.genes.corr , nSamples)
unsig_modules <- c("MEblue", "MEpurple", "MEturquoise", "MEpink")
sig_module_eigengenes <- module_eigengenes[, !(colnames(module_eigengenes) %in% unsig_modules)]
hubs_genes_correlation <- function(sig_module,colors, gene_corr) {
hubGenesList <- list()
for (module in colnames(sig_module)) {
module_name <- gsub('ME', '', module)
module_interest <- which(colors$unlist.moduleColors. == module_name)
module_interest_genes <- gene_corr[module_interest, module]
sorted_genes <- sort(module_interest_genes, decreasing = TRUE)
top_10_percent_index <- ceiling(length(sorted_genes) * 0.05)
hubGenes <- names(sorted_genes[1:top_10_percent_index])
hubGenesList[[module_name]] <- hubGenes
}
return(hubGenesList)
}
hubgenes_corr= hubs_genes_correlation(sig_module_eigengenes,moduleColors,module.genes.corr)
hubgenes_corr= hubs_genes_correlation(sig_module_eigengenes,moduleColors,module.genes.corr)
unsig_modules <- c("MEblue", "MEpurple", "MEturquoise", "MEpink")
sig_module_eigengenes <- module_eigengenes[, !(colnames(module_eigengenes) %in% unsig_modules)]
View(sig_module_eigengenes)
unsig_modules <- c("MEblue", "MEpurple", "MEgreen", "MEpink")
sig_module_eigengenes <- module_eigengenes[, !(colnames(module_eigengenes) %in% unsig_modules)]
View(sig_module_eigengenes)
hubs_genes_correlation <- function(sig_module,colors, gene_corr) {
hubGenesList <- list()
for (module in colnames(sig_module)) {
module_name <- gsub('ME', '', module)
module_interest <- which(colors$unlist.moduleColors. == module_name)
module_interest_genes <- gene_corr[module_interest, module]
sorted_genes <- sort(module_interest_genes, decreasing = TRUE)
top_10_percent_index <- ceiling(length(sorted_genes) * 0.05)
hubGenes <- names(sorted_genes[1:top_10_percent_index])
hubGenesList[[module_name]] <- hubGenes
}
return(hubGenesList)
}
hubgenes_corr= hubs_genes_correlation(sig_module_eigengenes,moduleColors,module.genes.corr)
moduleColors
hubs_genes_correlation <- function(sig_module,colors, gene_corr) {
hubGenesList <- list()
for (module in colnames(sig_module)) {
module_name <- gsub('ME', '', module)
module_interest <- which(colors$unlist.moduleColors. == module_name)
module_interest_genes <- gene_corr[module_interest, module]
sorted_genes <- sort(module_interest_genes, decreasing = TRUE)
top_5_percent_index <- ceiling(length(sorted_genes) * 0.05)
hubGenes <- names(sorted_genes[1:top_5_percent_index])
hubGenesList[[module_name]] <- hubGenes
}
return(hubGenesList)
}
hubgenes_corr= hubs_genes_correlation(sig_module_eigengenes,moduleColors,module.genes.corr)
####get hub genes
library(WGCNA)
library(data.table)
library(gridExtra)
library(ggplot2)
library(dplyr)
library(tibble)
library(devtools)
library(CorLevelPlot)
gene_expr=read.csv('gene_expression.csv')
rownames(gene_expr) <- gene_expr$X
gene_expr <- gene_expr[, -1]
module_eigengenes=read.csv('Soft_Power_Threshold/modules_18.csv')
rownames(module_eigengenes) <- module_eigengenes$X
module_eigengenes<- module_eigengenes[, -1]
###colors
moduleColors = read.csv('modules_18.csv')
###
nSamples <- nrow(gene_expr)
####correlation
module.genes.corr <- cor(gene_expr, module_eigengenes, use = "p")
######p-value
module.membership.measure.pvals <- corPvalueStudent(module.genes.corr , nSamples)
unsig_modules <- c("MEblue", "MEpurple", "MEgreen", "MEpink")
sig_module_eigengenes <- module_eigengenes[, !(colnames(module_eigengenes) %in% unsig_modules)]
hubs_genes_correlation <- function(sig_module,colors, gene_corr) {
hubGenesList <- list()
for (module in colnames(sig_module)) {
module_name <- gsub('ME', '', module)
module_interest <- which(colors$unlist.moduleColors. == module_name)
module_interest_genes <- gene_corr[module_interest, module]
sorted_genes <- sort(module_interest_genes, decreasing = TRUE)
top_5_percent_index <- ceiling(length(sorted_genes) * 0.05)
hubGenes <- names(sorted_genes[1:top_5_percent_index])
hubGenesList[[module_name]] <- hubGenes
}
return(hubGenesList)
}
hubgenes_corr= hubs_genes_correlation(sig_module_eigengenes,moduleColors,module.genes.corr)
module.genes.corr
####get hub genes
library(WGCNA)
library(data.table)
library(gridExtra)
library(ggplot2)
library(dplyr)
library(tibble)
library(devtools)
library(CorLevelPlot)
gene_expr=read.csv('gene_expression.csv')
rownames(gene_expr) <- gene_expr$X
gene_expr <- gene_expr[, -1]
module_eigengenes=read.csv('Soft_Power_Threshold/modules_18.csv')
rownames(module_eigengenes) <- module_eigengenes$X
module_eigengenes<- module_eigengenes[, -1]
moduleColors = read.csv('modules_18.csv')
###
nSamples <- nrow(gene_expr)
####correlation
module.genes.corr <- cor(gene_expr, module_eigengenes, use = "p")
######p-value
module.membership.measure.pvals <- corPvalueStudent(module.genes.corr , nSamples)
unsig_modules <- c("MEblue", "MEpurple", "MEgreen", "MEpink")
sig_module_eigengenes <- module_eigengenes[, !(colnames(module_eigengenes) %in% unsig_modules)]
hubs_genes_correlation <- function(sig_module,colors, gene_corr) {
hubGenesList <- list()
for (module in colnames(sig_module)) {
module_name <- gsub('ME', '', module)
module_interest <- which(colors$unlist.moduleColors. == module_name)
module_interest_genes <- gene_corr[module_interest, module]
sorted_genes <- sort(module_interest_genes, decreasing = TRUE)
top_5_percent_index <- ceiling(length(sorted_genes) * 0.05)
hubGenes <- names(sorted_genes[1:top_5_percent_index])
hubGenesList[[module_name]] <- hubGenes
}
return(hubGenesList)
}
hubgenes_corr= hubs_genes_correlation(sig_module_eigengenes,moduleColors,module.genes.corr)
hubs=as.data.frame(unlist(hubgenes_corr))
write.csv(hubs,'0.05_hubs_corr.csv')
